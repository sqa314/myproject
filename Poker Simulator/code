import java.util.*;
class Rank {
	int count1 = 0;
	int count2 = 0;
	int i,j,k,l = 0;
	int count = 0;
	public void cls() {
		count = 0;
	}
	public boolean RSP(int[][] a) {
		int s[] = new int[5];
		int p[] = {2,3,5,7};
		j = 0;
		for(i = 0;i < a.length-1; i++) {
			if (s[0] == 0)
				s[0] = a[i][1];
			if (a[i][0] == a[i+1][0] + 1) {
				s[j+1]=a[i+1][1];
				j++;
				count++;
			}
			else if (a[i][0] == a[i+1][0])
				s[j] = s[j] * a[i+1][1];
			else {
				cls();
				s[0] = 0;
				j = 0;
			}
			if(count == 4){
				for(k = 0;k < p.length; k++){
					for(l = 0; l < s.length; l++){
						if (s[l] % p[k] == 0 ){
							count1++;
						}
					}
					if(count1 == 5 && a[i][0] == 9){	
						count1 = 0;
						cls();
						return true;
					}
					count1 = 0;
				}
				for(l = 0; l < s.length-1; l++){
					s[l] = s[l+1];
				}
				s[4] = 0;
				j--;
				count--;
			}
		}	
		cls();
		count1 = 0;
		return false;
	}
	public boolean StF(int[][] a) {
		int s[] = new int[5];
		int p[] = {2,3,5,7};
		j = 0;
		for(i = 0;i < a.length-1; i++) {
			if (s[0] == 0)
				s[0] = a[i][1];
			if (a[i][0] == a[i+1][0] + 1) {
				s[j+1]=a[i+1][1];
				j++;
				count++;
			}
			else if (a[i][0] == a[i+1][0])
				s[j] = s[j] * a[i+1][1];
			else {
				cls();
				s[0] = 0;
				j = 0;
			}
			if(count == 4){
				for(k = 0;k < p.length; k++){
					for(l = 0; l < s.length; l++){
						if (s[l] % p[k] == 0 ){
							count1++;
						}
					}
					if(count1 == 5){
						count1 = 0;
						cls();
						return true;
					}
					count1 = 0;
				}
				for(l = 0; l < s.length-1; l++){
					s[l] = s[l+1];
				}
				s[4] = 0;
				j--;
				count--;
			}
		}	
		cls();
		count1 = 0;
		return false;
	}
	public boolean Fcd(int[][] a) {
		for(i = 0;i < a.length-1; i++) {
			if (a[i][0] == a[i+1][0])
				count++;
			else
				cls();
			if (count == 3) {
				cls();
				return true;
			}
		}
		cls();
		return false;
	}
	public boolean FuH(int[][] a) {
		int count1 = 0;
		int count2 = 0;
		for(i = 0;i < a.length-1; i++) {
			if (a[i][0] == a[i+1][0]) {
				count++;
				count2++;
			}
			else
				cls();
			if (count == 2)
				count1 = 1;
			if (count2 == 3 && count1 == 1) {
				count2 = 0;
				count1 = 0;
				cls();
				return true;
			}
		}
		cls();
		count2 = 0;
		count1 = 0;
		return false;
	}
	public boolean Fsh(int[][] a) {
		for(i = 0;i < a.length-1; i++) {
			if (a[i][2] == a[i+1][2])
				count++;
			else
				cls();
			if (count == 4) {
				cls();
				return true;
			}
		}
		cls();
		return false;
	}
	public boolean Str(int[][] a) {
		for(i = 0;i < a.length-1; i++) {
			if (a[i][0] == a[i+1][0] + 1)
				count++;
			else if (a[i][0] == a[i+1][0])
				;
			else
				cls();
			if (count == 4) {
				cls();
				return true;
			}
		}
		cls();
		return false;
	}
	public boolean Trp(int[][] a) {
		for(i = 0;i < a.length-1; i++) {
			if (a[i][0] == a[i+1][0])
				count++;
			else
				cls();
			if (count == 2) {
				cls();
				return true;
			}
		}
		cls();
		return false;
	}
	public boolean TwP(int[][] a) {
		for(i = 0;i < a.length-1; i++) {
			if (a[i][0] == a[i+1][0])
				count++;
			if (count == 2) {
				cls();
				return true;
			}
		}
		cls();
		return false;
	}
	public boolean OnP(int[][] a) {
		for(i = 0;i < a.length-1; i++) {
			if (a[i][0] == a[i+1][0])
				return true;				
		}
		return false;
	}
}
class Play {
	int i, j;
	boolean check;
	int newCard;
	Random rand = new Random();
	public int[][] shuffle(int n){
		int[][] card = new int[n][3];
		for(i = 0; i < n; i++) {
			for(check = false;check == false;) {
				newCard = rand.nextInt(52);
				card[i][0]= newCard;
				if(i==0)
					check = true;
				for(j = 0;j < i && card[i][0]!= card[j][0];j++) {
					if (j == i-1) 
						check = true;
				}
			}
			card[i][1] = newCard % 13;
			switch(newCard / 13) {
			case 0:
				card[i][2] = 2;
				break;
			case 1:
				card[i][2] = 3;
				break;
			case 2:
				card[i][2] = 5;
				break;
			case 3:
				card[i][2] = 7;
				break;
			}
		}
		return card;
	}
	public int[][] array(int[][] card) {
		int i,j,k;
		int temp1, temp2, temp3;
		int[][] arr = new int[card.length][3];
		for(i = 0; i < card.length; i++) {
			arr[i][0] = card[i][1];
			arr[i][1] = card[i][2];
			arr[i][2] = card[i][2];
		}
		for(j=0 ; j < card.length-1; j++)
		{
			for(k=j+1 ; k < card.length; k++)
			{
				if(arr[j][0] <= arr[k][0])
				{
					temp1 = arr[j][0];
					temp2 = arr[j][1];
					arr[j][0] = arr[k][0];
					arr[j][1] = arr[k][1];
					arr[k][0] = temp1;
					arr[k][1] = temp2;
				}
				if(arr[j][2] <= arr[k][2]) {
					temp3 = arr[j][2];
					arr[j][2] = arr[k][2];
					arr[k][2] = temp3;
				}
			}
		}
		return arr;
	}
	public int rank(int[][] arr) {
		Rank a = new Rank();
		if (a.RSP(arr) == true) 
			return 10;
		else if (a.StF(arr) == true)
			return 9;
		else if (a.Fcd(arr) == true)
			return 8;
		else if (a.FuH(arr) == true)
			return 7;
		else if (a.Fsh(arr) == true)
			return 6;
		else if (a.Str(arr) == true)
			return 5;
		else if (a.Trp(arr) == true)
			return 4;
		else if (a.TwP(arr) == true)
			return 3;
		else if (a.OnP(arr) == true)
			return 2;
		else
			return 1;
	}
}
class Display{
	int i;
	int n = 0;
	double[][] deck = new double[10][2];
	String card = "NoPOnPTwPTriStrFshFuHFcdStFRSF";
	public void statistic() {
		for(i = 0; i<10; i++) {
			deck[i][1] = deck[i][0] / n * (double)100;
			System.out.println("	"+ card.substring(((i+1)*3)-3,((i+1)*3))+ "	" + (int)deck[i][0] + "회	" + deck[i][1] + "%");
		}
	}
	public void print (int a, int[][] b) {
	for(i = 0; i < b.length; i++) {
		System.out.print((b[i][1]+1));
		switch(b[i][2]) {
		case 2:
			System.out.print("C	");
			break;
		case 3:
			System.out.print("D	");
			break;
		case 5:
			System.out.print("H	");
			break;
		case 7:
			System.out.print("S	");
			break;
		}
	}
	System.out.print("	"+card.substring((a*3)-3,(a*3)));
	deck[a-1][0]++;
	n++;
	System.out.println();
}
	
}
public class poker {
	public static void main(String[] args) {
		int n;
		int i;
		int num;
		double time;
		int result;
		int[][] card;
		Scanner scan = new Scanner(System.in);
		Play game = new Play();
		Display show = new Display();
		System.out.println("몇 장?");
		n = scan.nextInt();
		System.out.println("몇 번?");
		num = scan.nextInt();
		double start = System.currentTimeMillis();
		for(i = 0; i < num; i++) {
			card = game.shuffle(n);
			result = game.rank(game.array(card));
			System.out.print((i+1) + "#			");
			show.print(result, card);
		}
		double end = System.currentTimeMillis();
		time = end - start;
		show.statistic();
		System.out.println("	실행시간" + (time/1000) + "초");
	}
}
